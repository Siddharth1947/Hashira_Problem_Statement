import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonSyntaxException;

import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.util.*;

class Share {
    BigInteger x;
    BigInteger y;

    public Share(BigInteger x, BigInteger y) {
        this.x = x;
        this.y = y;
    }

    public BigInteger getX() { return x; }
    public BigInteger getY() { return y; }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Share share = (Share) o;
        return Objects.equals(x, share.x) && Objects.equals(y, share.y);
    }

    @Override
    public int hashCode() {
        return Objects.hash(x, y);
    }

    @Override
    public String toString() {
        return "Share{x=" + x + ", y=" + y + '}';
    }
}

public class ShamirSecretSharing {
    private static final BigInteger PRIME_MODULUS = BigInteger.valueOf(2).pow(127).subtract(BigInteger.ONE);

    private static boolean isExpression(String str) {
        return str.contains("(") && str.contains(")");
    }

    public static BigInteger evaluateExpression(String expr) {
        expr = expr.trim().toUpperCase();

        if (expr.matches("-?\\d+")) {
            return new BigInteger(expr);
        }

        if (expr.endsWith(")")) {
            int openParenIndex = expr.indexOf('(');
            if (openParenIndex != -1) {
                String functionName = expr.substring(0, openParenIndex);
                String argsString = expr.substring(openParenIndex + 1, expr.length() - 1);
                String[] nums = argsString.split(",");

                List<BigInteger> bigIntArgs = new ArrayList<>();
                for (String numStr : nums) {
                    bigIntArgs.add(new BigInteger(numStr.trim()));
                }

                if (bigIntArgs.isEmpty()) {
                    throw new IllegalArgumentException("Expression '" + expr + "' has no arguments.");
                }

                switch (functionName) {
                    case "SUM":
                        BigInteger sum = BigInteger.ZERO;
                        for (BigInteger num : bigIntArgs) sum = sum.add(num);
                        return sum;
                    case "MULTIPLY":
                        BigInteger prod = BigInteger.ONE;
                        for (BigInteger num : bigIntArgs) prod = prod.multiply(num);
                        return prod;
                    case "HCF":
                        if (bigIntArgs.size() != 2) throw new IllegalArgumentException("HCF requires exactly two arguments.");
                        return bigIntArgs.get(0).gcd(bigIntArgs.get(1));
                    case "LCM":
                        if (bigIntArgs.size() != 2) throw new IllegalArgumentException("LCM requires exactly two arguments.");
                        BigInteger a = bigIntArgs.get(0);
                        BigInteger b = bigIntArgs.get(1);
                        return a.multiply(b).abs().divide(a.gcd(b));
                    default:
                        throw new IllegalArgumentException("Unrecognized function: " + functionName + " in expression: " + expr);
                }
            }
        }
        throw new IllegalArgumentException("Could not parse expression: " + expr);
    }

    public static BigInteger decodeBase(String value, int base) {
        return new BigInteger(value.trim(), base);
    }

    public BigInteger reconstructSecret(List<Share> points, BigInteger primeModulus) {
        if (points.size() < 1) {
            throw new IllegalArgumentException("Need at least 1 point to reconstruct the secret.");
        }

        BigInteger secret = BigInteger.ZERO;

        for (int j = 0; j < points.size(); j++) {
            BigInteger x_j = points.get(j).x;
            BigInteger y_j = points.get(j).y;

            BigInteger numeratorProduct = BigInteger.ONE;
            BigInteger denominatorProduct = BigInteger.ONE;

            for (int m = 0; m < points.size(); m++) {
                if (j == m) continue;
                BigInteger x_m = points.get(m).x;
                numeratorProduct = numeratorProduct.multiply(x_m.negate()).mod(primeModulus);
                BigInteger diff = x_j.subtract(x_m).mod(primeModulus);
                if (diff.equals(BigInteger.ZERO)) {
                    throw new ArithmeticException("Division by zero in Lagrange interpolation. Duplicate x-values detected: " + x_j + " and " + x_m);
                }
                denominatorProduct = denominatorProduct.multiply(diff).mod(primeModulus);
            }

            BigInteger term = y_j.multiply(numeratorProduct).mod(primeModulus);
            BigInteger invDenominator = denominatorProduct.modInverse(primeModulus);
            term = term.multiply(invDenominator).mod(primeModulus);
            secret = secret.add(term).mod(primeModulus);
        }
        return secret.add(primeModulus).mod(primeModulus);
    }

    public List<List<Share>> generateCombinations(List<Share> allShares, int k) {
        List<List<Share>> result = new ArrayList<>();
        generateCombinationsRecursive(allShares, k, 0, new ArrayList<>(), result);
        return result;
    }

    private void generateCombinationsRecursive(List<Share> allShares, int k, int start, List<Share> currentCombination, List<List<Share>> result) {
        if (currentCombination.size() == k) {
            result.add(new ArrayList<>(currentCombination));
            return;
        }

        if (start >= allShares.size() || currentCombination.size() + (allShares.size() - start) < k) {
            return;
        }

        for (int i = start; i < allShares.size(); i++) {
            currentCombination.add(allShares.get(i));
            generateCombinationsRecursive(allShares, k, i + 1, currentCombination, result);
            currentCombination.remove(currentCombination.size() - 1);
        }
    }

    public BigInteger findActualSecret(List<Share> allShares, int k) {
        if (allShares.size() < k) {
            throw new IllegalArgumentException("Not enough shares (" + allShares.size() + ") to form a combination of size k (" + k + ").");
        }

        List<List<Share>> combinations = generateCombinations(allShares, k);
        Map<BigInteger, Integer> secretCounts = new HashMap<>();

        for (List<Share> combination : combinations) {
            try {
                BigInteger reconstructedSecret = reconstructSecret(combination, PRIME_MODULUS);
                secretCounts.put(reconstructedSecret, secretCounts.getOrDefault(reconstructedSecret, 0) + 1);
            } catch (Exception e) {
            }
        }

        if (secretCounts.isEmpty()) {
            throw new RuntimeException("No secrets could be reconstructed from any valid combination.");
        }

        BigInteger actualSecret = null;
        int maxCount = -1;

        for (Map.Entry<BigInteger, Integer> entry : secretCounts.entrySet()) {
            if (entry.getValue() > maxCount) {
                maxCount = entry.getValue();
                actualSecret = entry.getKey();
            }
        }

        return actualSecret;
    }

    public static void main(String[] args) {
        String[] jsonFilePaths = {"input1.json", "input2.json"};

        Gson gson = new Gson();
        ShamirSecretSharing sss = new ShamirSecretSharing();

        int testCaseNumber = 1;
        for (String jsonFilePath : jsonFilePaths) {
            Map<String, Object> rawInputData = null;

            try (FileReader reader = new FileReader(jsonFilePath)) {
                rawInputData = gson.fromJson(reader, new TypeToken<Map<String, Object>>(){}.getType());
            } catch (IOException | JsonSyntaxException e) {
                continue;
            }

            if (rawInputData == null || !rawInputData.containsKey("keys")) {
                continue;
            }

            Map<String, Double> keysMap = (Map<String, Double>) rawInputData.get("keys");
            int n = keysMap.get("n").intValue();
            int k = keysMap.get("k").intValue();

            List<Share> processedShares = new ArrayList<>();
            for (Map.Entry<String, Object> entry : rawInputData.entrySet()) {
                String key = entry.getKey();
                if ("keys".equals(key)) {
                    continue;
                }
                try {
                    BigInteger x = new BigInteger(key);
                    Map<String, String> yData = (Map<String, String>) entry.getValue();
                    String baseStr = yData.get("base");
                    String valueStr = yData.get("value");

                    BigInteger y;
                    if (isExpression(valueStr)) {
                        y = evaluateExpression(valueStr);
                    } else {
                        int base = Integer.parseInt(baseStr);
                        y = decodeBase(valueStr, base);
                    }
                    processedShares.add(new Share(x, y));
                } catch (Exception e) {
                }
            }

            processedShares.sort(Comparator.comparing(Share::getX));

            if (processedShares.size() < k) {
                continue;
            }

            try {
                BigInteger secret = sss.findActualSecret(processedShares, k);
                System.out.println("Output for TestCase - " + testCaseNumber);
                System.out.println(secret);
                testCaseNumber++;
            } catch (Exception e) {
            }
        }
    }
}
